# AWSTemplateFormatVersion: 2010-09-09
# Description: ---
# Metadata:

# Parameters:
#   myKeyPair:
#     Description: Amazon EC2 Key Pair
#     Type: AWS::EC2::KeyPair::KeyName

# Mappings:

# Conditions:

Resources:
  # VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: myVPC

  # INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway

  # SUBNETS
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      VpcId: !Ref myVPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs ""
      VpcId: !Ref myVPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      VpcId: !Ref myVPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs ""
      VpcId: !Ref myVPC
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  # NAT GATEWAY

  eip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  eip2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt eip1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt eip2.AllocationId
      SubnetId: !Ref PublicSubnet2

  # ROUTE TABLES
  # Public
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # SECURITY GROUPS
  # Internet-facing
  ALBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Accepts incoming traffic on port 80
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Description
          Value: Only accept traffic from ALB

  # For instanes only accepting traffic from ELB
  PrivSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Accepts incoming traffic on port 80 and 22
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt
            - ALBSecGroup
            - GroupId
      Tags:
        - Key: Description
          Value: Accept traffic on port 80

  # LAUNCH CONFIG
  myLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false # Since not default subnet, default is false
      # IamInstanceProfile:
      ImageId: ami-028188d9b49b32a80 # Amazon Linux AMI in Ireland
      # EbsOptimized: true|false
      # InstanceMonitoring: true|false
      InstanceType: t2.micro
      # KeyName: !Ref myKeyPair
      SecurityGroups:
        - !Ref PrivSecGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex 
          yum update -y
          yum install httpd -y
          echo "<html> <h1> This is a test :D </h1> </html>" > /var/www/html/index.html
          service httpd start
          chkconfig --add httpd

  # LOAD BALANCER
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: [!GetAtt ALBSecGroup.GroupId]
      # SecurityGroups: !GetAtt
      #   - ALBSecGroup
      #   - GroupId
      # SecurityGroups:
      #   - !Ref ALBSecGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: internet-facing-ALB

  # LISTERNER for ALB
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # Certificates:
      #   - Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      # SslPolicy: String

  # TARGET GROUP
  myTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: / # This is also the default path for the health ping
      HealthCheckProtocol: HTTP # This is default
      Matcher:
        HttpCode: 200
      Protocol: HTTP
      Port: 80
      TargetType: instance
      VpcId: !Ref myVPC

  #AUTO SCALE GROUP
  myAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - PrivateRoute1
      - PrivateRoute2
    Properties:
      # AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref myLaunchConfig
      MaxSize: 6
      MinSize: 2
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref myTargetGroup
      Tags:
        - Key: Name
          Value: AutoScaleGroup-instance
          PropagateAtLaunch: true

Outputs:
  ALBDNS:
    Description: The Public DNS for Application Load Balancer
    Value: !GetAtt
      - ALB
      - DNSName
