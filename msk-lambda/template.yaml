AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  A small MSK cluster with a Lambda as consumer.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Resources:
  KafkaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true

  # INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref KafkaVPC
      InternetGatewayId: !Ref InternetGateway

  # SUBNETS
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      VpcId: !Ref KafkaVPC
      CidrBlock: 10.1.0.0/24

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs ""
      VpcId: !Ref KafkaVPC
      CidrBlock: 10.1.1.0/24

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      VpcId: !Ref KafkaVPC
      CidrBlock: 10.1.2.0/24

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs ""
      VpcId: !Ref KafkaVPC
      CidrBlock: 10.1.3.0/24

  # NAT GATEWAY

  eip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  eip2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt eip1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt eip2.AllocationId
      SubnetId: !Ref PublicSubnet2

  # ROUTES
  # Public
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref KafkaVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref KafkaVPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref KafkaVPC

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # SECURITY GROUPS
  KafkaSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Only allow traffic from JumpBox and ESM ENI
      VpcId:
        !Ref KafkaVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref JumpBoxSecGroup # Allow jumpbox access
          IpProtocol: -1
          
  ESMSecGroupIngress:  
    Type: AWS::EC2::SecurityGroupIngress  
    Properties:
      IpProtocol: -1
      SourceSecurityGroupId: !Ref KafkaSecGroup # Allow THIS sec group access, because Lambda ESM ENI inherits this SG
      GroupId: !Ref KafkaSecGroup

  # LambdaSecGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: SecGroup for Lambda to use.
  #     VpcId:
  #       !Ref KafkaVPC

  JumpBoxSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh
      VpcId:
        !Ref KafkaVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22

  # EC2
  JumpBox: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-079d9017cb651564d
      InstanceType: t3.large
      KeyName: niklaspalm
      SecurityGroupIds: 
        - !Ref JumpBoxSecGroup
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo yum update -y
          sudo yum install git -y

          sudo yum -y groupinstall base "Development tools" --setopt=group_package_types=mandatory,default,optional
          sudo yum -y install openssl-devel
          sudo yum -y install libcurl-devel

          cd ~
          git clone https://github.com/edenhill/kafkacat.git
          cd kafkacat
          ./kafkacat/bootstrap.sh

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref JumpBox
      

  MskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: MskBrokerLogs
      RetentionInDays: 30

  # KAFKA
  MskCluster:
    Type: 'AWS::MSK::Cluster'
    Properties:
      ClusterName: MskCluster
      KafkaVersion: 2.2.1 # 1.1.1 or 2.2.1
      NumberOfBrokerNodes: 2
      EnhancedMonitoring: PER_TOPIC_PER_BROKER
      LoggingInfo: # configure your MSK cluster to send broker logs to S3, CW or Firehose
        BrokerLogs:
          CloudWatchLogs:
            Enabled: true
            LogGroup: !Ref MskLogGroup
      EncryptionInfo: # Includes all encryption-related information.
      #  EncryptionAtRest: # KMS key to encrypt data on the volumes
      #    DataVolumeKMSKeyId: ReplaceWithKmsKeyArn # If not specified, key is created
       EncryptionInTransit:
         ClientBroker: PLAINTEXT
         InCluster: false # If false, traffic between brokers is in plaintext.
      #OpenMonitoring: # Send logs to Prometheus?
      ConfigurationInfo: 
        Arn: arn:aws:kafka:eu-west-1:641758013508:configuration/auto-create-topics/e047bde3-c48b-47b9-be7c-2f8aa5e238de-1 # ARN and revision of kafka config to use
        Revision: 2
      # ClientAuthentication: # TLS certificate to authenticate clients
      #  Tls:
      #    CertificateAuthorityArnList:
      #      - ReplaceWithCAArn
      #Tags:
      #  Environment: Test
      #  Owner: QATeam
      BrokerNodeGroupInfo:
        BrokerAZDistribution: DEFAULT # Not currently in use by CF.
        InstanceType: kafka.m5.large #kafka.t3.small, kafka.m5.large, kafka.m5.xlarge, kafka.m5.2xlarge, kafka.m5.4xlarge, kafka.m5.8xlarge, kafka.m5.12xlarge, kafka.m5.16xlarge, and kafka.m5.24xlarge.
        SecurityGroups: # To be used by all brokers.
          - !Ref KafkaSecGroup
        # StorageInfo: # Specify EBS volume size
        ClientSubnets: # Must be in distinct AZs. Workload spread evenly
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2


  ConsumeKafkaLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: code/
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
        - AWSLambdaMSKExecutionRole
        # - Statement:
        #   - Sid: ConsumeFromMSKPolicy
        #     Effect: Allow
        #     Action:
        #     - ssm:DescribeParameters
        #     - ec2:CreateNetworkInterface
        #     - ec2:DescribeNetworkInterfaces
        #     - ec2:DescribeVpcs
        #     - ec2:DeleteNetworkInterface
        #     - ec2:DescribeSubnets
        #     - ec2:DescribeSecurityGroups
        #     - kafka:DescribeCluster
        #     - kafka:GetBootstrapBrokers
        #     - logs:CreateLogGroup
        #     - logs:CreateLogStream
        #     - logs:PutLogEvents
        #     Resource: '*'
      # VpcConfig:
      #   SecurityGroupIds: 
      #     - !Ref LambdaSecGroup
      #   SubnetIds: 
      #     - !Ref PublicSubnet1
      #     - !Ref PublicSubnet2
      # Events: # Specifying ESM here doesn't support batch size
      #   MskEvent:
      #     Type: MSK 
      #     Properties:
      #       StartingPosition: TRIM_HORIZON
      #       Stream:
      #         Ref: MskCluster
      #       Topics:
      #         - MyTopic

  MSKLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      Topics:
        - test
      EventSourceArn: !Ref MskCluster
      FunctionName: !Ref ConsumeKafkaLambda
      StartingPosition: TRIM_HORIZON


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  MSKClusterARN:
    Value: !Ref MskCluster
  LambdaARN:
    Description: MSK consumer Lambda function ARN
    Value: !GetAtt ConsumeKafkaLambda.Arn
  JumpBoxIP:
    Description: EIP attached to the JumpBox
    Value: !Ref MyEIP
